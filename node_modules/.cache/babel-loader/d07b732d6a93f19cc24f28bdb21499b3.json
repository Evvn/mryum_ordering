{"ast":null,"code":"import _classCallCheck from \"D:\\\\Documents\\\\GitHub\\\\mryum-avc\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Documents\\\\GitHub\\\\mryum-avc\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Documents\\\\GitHub\\\\mryum-avc\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Documents\\\\GitHub\\\\mryum-avc\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Documents\\\\GitHub\\\\mryum-avc\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Documents\\\\GitHub\\\\mryum-avc\\\\src\\\\components\\\\Menu\\\\LanguageSelect.js\";\nimport React from 'react';\nimport _ from 'lodash';\nimport Modal from '../Common/Modal.js';\nimport { languageWarnings } from './enums/languageEnums.js';\n\nvar Filter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Filter, _React$Component);\n\n  function Filter(props) {\n    var _this;\n\n    _classCallCheck(this, Filter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this, props)); // TODO: handle this with redux / local storage later\n\n    _this.langClick = function (e) {\n      // toggle 'open' classes\n      document.querySelector('.langArrow').classList.toggle('rotate');\n      document.querySelector('.languageList').classList.toggle('langOpen');\n\n      _this.closeFilterMenu();\n    };\n\n    _this.state = {\n      showModal: false\n    };\n    return _this;\n  }\n\n  _createClass(Filter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('scroll', _.throttle(this.closeFilterMenu, 300, {\n        trailing: true,\n        leading: true\n      }));\n    }\n  }, {\n    key: \"closeFilterMenu\",\n    value: function closeFilterMenu() {\n      // close filter if it's open\n      if (document.querySelector('.filterList') !== null) {\n        document.querySelector('.filterList').classList.remove('open');\n\n        if (document.querySelector('.filterList').classList.contains('open')) {\n          document.querySelector('.filterText').textContent = 'close';\n        } else {\n          document.querySelector('.filterText').textContent = 'filter';\n        }\n      }\n    } // on language section click\n\n  }, {\n    key: \"printLanguages\",\n    value: function printLanguages(languageList) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          lang = _this$props.lang,\n          updateLang = _this$props.updateLang;\n      var languageButtons = [];\n      languageList.forEach(function (language) {\n        var className = 'radioBtn';\n\n        if (language.code === lang) {\n          className = 'radioBtn radioSelected';\n        }\n\n        languageButtons.push(React.createElement(\"p\", {\n          key: language.name,\n          className: \"language\",\n          id: language.name,\n          code: language.code,\n          onClick: function onClick(e) {\n            updateLang(language.code);\n\n            _this2.setState({\n              showModal: true\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: className,\n          code: language.code,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }), language.name));\n      });\n      return languageButtons;\n    }\n  }, {\n    key: \"renderModal\",\n    value: function renderModal(lang) {\n      var _this3 = this;\n\n      var warning = languageWarnings[lang.replace('-', '')];\n      return React.createElement(Modal, {\n        heading: warning.greeting,\n        body: warning.instructions,\n        cta: warning.confirmation,\n        onClick: function onClick() {\n          _this3.setState({\n            showModal: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var lang = this.props.lang;\n      var languageList = [{\n        code: 'en',\n        name: 'English'\n      }, {\n        code: 'fr',\n        name: 'Français'\n      }, {\n        code: 'el',\n        name: 'ελληνικά'\n      }, {\n        code: 'zh-CN',\n        name: '中文'\n      }, {\n        code: 'es',\n        name: 'Español'\n      }, {\n        code: 'it',\n        name: 'Italiano'\n      }];\n      return React.createElement(\"div\", {\n        className: \"selectLanguage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, this.state.showModal && lang !== 'en' ? this.renderModal(lang) : '', React.createElement(\"span\", {\n        className: \"langCode\",\n        onClick: this.langClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, lang), React.createElement(\"div\", {\n        className: \"langArrow\",\n        onClick: this.langClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"languageList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this.printLanguages(languageList)));\n    }\n  }]);\n\n  return Filter;\n}(React.Component);\n\nexport default Filter;","map":{"version":3,"sources":["D:\\Documents\\GitHub\\mryum-avc\\src\\components\\Menu\\LanguageSelect.js"],"names":["React","_","Modal","languageWarnings","Filter","props","langClick","e","document","querySelector","classList","toggle","closeFilterMenu","state","showModal","window","addEventListener","throttle","trailing","leading","remove","contains","textContent","languageList","lang","updateLang","languageButtons","forEach","language","className","code","push","name","setState","warning","replace","greeting","instructions","confirmation","renderModal","printLanguages","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport _ from 'lodash'\r\nimport Modal from '../Common/Modal.js';\r\nimport { languageWarnings } from './enums/languageEnums.js'\r\n\r\nclass Filter extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    // TODO: handle this with redux / local storage later\r\n    this.state = {\r\n      showModal: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', _.throttle(this.closeFilterMenu, 300, { trailing: true, leading: true }))\r\n  }\r\n\r\n\r\n  closeFilterMenu() {\r\n    // close filter if it's open\r\n    if (document.querySelector('.filterList') !== null) {\r\n      document.querySelector('.filterList').classList.remove('open')\r\n      if (document.querySelector('.filterList').classList.contains('open')) {\r\n        document.querySelector('.filterText').textContent = 'close'\r\n      } else {\r\n        document.querySelector('.filterText').textContent = 'filter'\r\n      }\r\n    }\r\n  }\r\n\r\n  // on language section click\r\n  langClick = (e) => {\r\n    // toggle 'open' classes\r\n    document.querySelector('.langArrow').classList.toggle('rotate')\r\n    document.querySelector('.languageList').classList.toggle('langOpen')\r\n    this.closeFilterMenu()\r\n  }\r\n\r\n  printLanguages(languageList) {\r\n    const { lang, updateLang } = this.props\r\n    let languageButtons = []\r\n    languageList.forEach(language => {\r\n      let className = 'radioBtn'\r\n      if (language.code === lang) {\r\n        className = 'radioBtn radioSelected'\r\n      }\r\n      languageButtons.push(\r\n        <p\r\n          key={language.name}\r\n          className=\"language\"\r\n          id={language.name}\r\n          code={language.code}\r\n          onClick={ (e) => {\r\n            updateLang(language.code)\r\n            this.setState({\r\n              showModal: true,\r\n            })\r\n          } }\r\n        >\r\n          <span className={className} code={language.code} />{language.name}\r\n        </p>\r\n      )\r\n    })\r\n    return languageButtons\r\n  }\r\n\r\n  renderModal(lang) {\r\n    const warning = languageWarnings[lang.replace('-','')]\r\n\r\n    return(\r\n      <Modal\r\n        heading={warning.greeting}\r\n        body={warning.instructions}\r\n        cta={warning.confirmation}\r\n        onClick={() => {\r\n          this.setState({\r\n            showModal: false,\r\n          })\r\n        }\r\n      }/>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { lang, } = this.props\r\n    const languageList = [\r\n      {\r\n        code: 'en',\r\n        name: 'English',\r\n      },\r\n      {\r\n        code: 'fr',\r\n        name: 'Français',\r\n      },\r\n      {\r\n        code: 'el',\r\n        name: 'ελληνικά',\r\n      },\r\n      {\r\n        code: 'zh-CN',\r\n        name: '中文',\r\n      },\r\n      {\r\n        code: 'es',\r\n        name: 'Español',\r\n      },\r\n      {\r\n        code: 'it',\r\n        name: 'Italiano',\r\n      },\r\n    ]\r\n\r\n    return(\r\n      <div className=\"selectLanguage\">\r\n\r\n        { this.state.showModal && lang !== 'en' ?\r\n          this.renderModal(lang)\r\n          : '' }\r\n\r\n        <span className=\"langCode\" onClick={this.langClick}>{lang}</span>\r\n        <div className=\"langArrow\" onClick={this.langClick}></div>\r\n\r\n        <div className=\"languageList\">\r\n          {this.printLanguages(languageList)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Filter\r\n"]},"metadata":{},"sourceType":"module"}