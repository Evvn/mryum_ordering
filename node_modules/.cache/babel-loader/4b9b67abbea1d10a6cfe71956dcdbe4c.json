{"ast":null,"code":"var getSubtotals = function getSubtotals(item) {\n  var itemClone = item;\n  var subtotal = 0;\n  item.addOns.map(function (addOn) {\n    subtotal = subtotal + addOn.price;\n  });\n  itemClone.subtotal = (item.price + subtotal) * item.quantity;\n  return itemClone;\n};\n\nvar addToOrder = function addToOrder(oldOrderState, newItem, quantity) {\n  var items = oldOrderState.items,\n      subtotal = oldOrderState.subtotal;\n  console.log(newItem);\n  var added = false;\n  var newItems = [];\n  var orderTotal = 0;\n  items.map(function (item) {\n    var itemClone = item;\n\n    if (item.id === newItem.id) {\n      itemClone.quantity = itemClone.quanity + quantity;\n      added = true;\n    }\n\n    var itemOutput = getSubtotals(itemClone);\n    orderTotal = orderTotal + itemOutput.subtotal;\n    newItems.push(itemOutput);\n  });\n\n  if (!added) {\n    var itemOutput = getSubtotals(newItem);\n    orderTotal = orderTotal + itemOutput.subtotal;\n    newItems.push(itemOutput);\n  }\n\n  return {\n    items: newItems,\n    orderTotal: orderTotal\n  };\n};\n\nvar removeFromOrder = function removeFromOrder(oldOrderState, itemToRemove, quantity) {\n  var items = oldOrderState.items,\n      subtotal = oldOrderState.subtotal;\n  var newItems = [];\n  var orderTotal = 0;\n  items.map(function (item) {\n    var itemClone = item;\n\n    if (item.id !== itemToRemove.id) {\n      newItems.push(itemClone);\n      orderTotal = orderTotal + itemClone.subtotal;\n    } else {\n      orderTotal = orderTotal - itemClone.subtotal;\n    }\n  });\n  return {\n    items: newItems,\n    orderTotal: orderTotal\n  };\n};","map":{"version":3,"sources":["/Users/michaelfoster/Git/mryum-avc/src/utils/orderUtils.js"],"names":["getSubtotals","item","itemClone","subtotal","addOns","map","addOn","price","quantity","addToOrder","oldOrderState","newItem","items","console","log","added","newItems","orderTotal","id","quanity","itemOutput","push","removeFromOrder","itemToRemove"],"mappings":"AACA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAAC,IAAI,EAAI;AACzB,MAAMC,SAAS,GAAGD,IAAlB;AACA,MAAIE,QAAQ,GAAG,CAAf;AACAF,EAAAA,IAAI,CAACG,MAAL,CAAYC,GAAZ,CAAgB,UAAAC,KAAK,EAAI;AACrBH,IAAAA,QAAQ,GAAGA,QAAQ,GAAGG,KAAK,CAACC,KAA5B;AACH,GAFD;AAIAL,EAAAA,SAAS,CAACC,QAAV,GAAqB,CAACF,IAAI,CAACM,KAAL,GAAaJ,QAAd,IAA0BF,IAAI,CAACO,QAApD;AACA,SAAON,SAAP;AACH,CATD;;AAWA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACC,aAAD,EAAgBC,OAAhB,EAAyBH,QAAzB,EAAsC;AAAA,MAC7CI,KAD6C,GACzBF,aADyB,CAC7CE,KAD6C;AAAA,MACtCT,QADsC,GACzBO,aADyB,CACtCP,QADsC;AAGrDU,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AAEA,MAAII,KAAK,GAAG,KAAZ;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACAL,EAAAA,KAAK,CAACP,GAAN,CAAU,UAAAJ,IAAI,EAAI;AACd,QAAIC,SAAS,GAAGD,IAAhB;;AACA,QAAGA,IAAI,CAACiB,EAAL,KAAYP,OAAO,CAACO,EAAvB,EAA0B;AACtBhB,MAAAA,SAAS,CAACM,QAAV,GAAqBN,SAAS,CAACiB,OAAV,GAAoBX,QAAzC;AACAO,MAAAA,KAAK,GAAG,IAAR;AACH;;AACD,QAAMK,UAAU,GAAGpB,YAAY,CAACE,SAAD,CAA/B;AACAe,IAAAA,UAAU,GAAGA,UAAU,GAAGG,UAAU,CAACjB,QAArC;AACAa,IAAAA,QAAQ,CAACK,IAAT,CAAcD,UAAd;AACH,GATD;;AAWA,MAAG,CAACL,KAAJ,EAAU;AACN,QAAMK,UAAU,GAAGpB,YAAY,CAACW,OAAD,CAA/B;AACAM,IAAAA,UAAU,GAAGA,UAAU,GAAGG,UAAU,CAACjB,QAArC;AACAa,IAAAA,QAAQ,CAACK,IAAT,CAAcD,UAAd;AACH;;AAGD,SAAO;AACHR,IAAAA,KAAK,EAAEI,QADJ;AAEHC,IAAAA,UAAU,EAAVA;AAFG,GAAP;AAKH,CA/BD;;AAiCA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACZ,aAAD,EAAgBa,YAAhB,EAA8Bf,QAA9B,EAA2C;AAAA,MACvDI,KADuD,GACnCF,aADmC,CACvDE,KADuD;AAAA,MAChDT,QADgD,GACnCO,aADmC,CAChDP,QADgD;AAG/D,MAAMa,QAAQ,GAAG,EAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACAL,EAAAA,KAAK,CAACP,GAAN,CAAU,UAAAJ,IAAI,EAAI;AACd,QAAIC,SAAS,GAAGD,IAAhB;;AACA,QAAGA,IAAI,CAACiB,EAAL,KAAYK,YAAY,CAACL,EAA5B,EAA+B;AAC3BF,MAAAA,QAAQ,CAACK,IAAT,CAAcnB,SAAd;AACAe,MAAAA,UAAU,GAAGA,UAAU,GAAGf,SAAS,CAACC,QAApC;AACH,KAHD,MAII;AACAc,MAAAA,UAAU,GAAGA,UAAU,GAAGf,SAAS,CAACC,QAApC;AACH;AAEJ,GAVD;AAYA,SAAO;AACHS,IAAAA,KAAK,EAAEI,QADJ;AAEHC,IAAAA,UAAU,EAAVA;AAFG,GAAP;AAKH,CAtBD","sourcesContent":["\nconst getSubtotals = item => {\n    const itemClone = item;\n    let subtotal = 0;\n    item.addOns.map(addOn => {\n        subtotal = subtotal + addOn.price;\n    });\n\n    itemClone.subtotal = (item.price + subtotal) * item.quantity;\n    return itemClone;\n}\n\nconst addToOrder = (oldOrderState, newItem, quantity) => {\n    const { items, subtotal } = oldOrderState;\n\n    console.log(newItem);\n\n    let added = false;\n    const newItems = [];\n    let orderTotal = 0;\n    items.map(item => {\n        let itemClone = item;\n        if(item.id === newItem.id){\n            itemClone.quantity = itemClone.quanity + quantity;\n            added = true;\n        }\n        const itemOutput = getSubtotals(itemClone);\n        orderTotal = orderTotal + itemOutput.subtotal;\n        newItems.push(itemOutput);\n    });\n    \n    if(!added){\n        const itemOutput = getSubtotals(newItem);\n        orderTotal = orderTotal + itemOutput.subtotal;\n        newItems.push(itemOutput);\n    }\n\n\n    return {\n        items: newItems,\n        orderTotal\n    };\n\n};\n\nconst removeFromOrder = (oldOrderState, itemToRemove, quantity) => {\n    const { items, subtotal } = oldOrderState;\n\n    const newItems = [];\n    let orderTotal = 0;\n    items.map(item => {\n        let itemClone = item;\n        if(item.id !== itemToRemove.id){\n            newItems.push(itemClone);\n            orderTotal = orderTotal + itemClone.subtotal;\n        }\n        else{\n            orderTotal = orderTotal - itemClone.subtotal;\n        }\n        \n    });\n\n    return {\n        items: newItems,\n        orderTotal\n    };\n\n};\n\n"]},"metadata":{},"sourceType":"module"}