{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addToOrder),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removeFromOrder),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(actionWatcher);\n\nimport * as actionTypes from '../../components/Cart/actions/actionTypes/actionTypes.js'; // eslint-disable-next-line\n\nimport _ from 'lodash';\nimport { takeLatest, put, select } from 'redux-saga/effects';\nimport * as orderUtils from '../../utils/orderUtils.js';\nexport function addToOrder(action) {\n  var getCurrentOrder, currentOrder, newItem, orderClone, nextCurrentOrder;\n  return _regeneratorRuntime.wrap(function addToOrder$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n\n          getCurrentOrder = function getCurrentOrder(state) {\n            return state.persistentCart.currentOrder;\n          };\n\n          _context.next = 4;\n          return select(getCurrentOrder);\n\n        case 4:\n          currentOrder = _context.sent;\n          _context.next = 7;\n          return orderUtils.buildItemTemplate(action.item, action.quantity);\n\n        case 7:\n          newItem = _context.sent;\n          _context.next = 10;\n          return _.cloneDeep(currentOrder);\n\n        case 10:\n          orderClone = _context.sent;\n          nextCurrentOrder = {};\n\n          if (orderClone[newItem.id]) {\n            nextCurrentOrder[newItem.id] = [newItem].concat(orderClone[newItem.id]);\n          } else {\n            nextCurrentOrder[newItem.id] = [newItem];\n          }\n\n          _context.next = 15;\n          return put({\n            type: actionTypes.ADD_TO_ORDER_SUCCESS,\n            currentOrder: nextCurrentOrder\n          });\n\n        case 15:\n          _context.next = 22;\n          break;\n\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 22;\n          return put({\n            type: actionTypes.ADD_TO_ORDER_FAILURE,\n            error: _context.t0\n          });\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 17]]);\n}\nexport function removeFromOrder(action) {\n  var getCurrentOrder, currentOrder;\n  return _regeneratorRuntime.wrap(function removeFromOrder$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n\n          getCurrentOrder = function getCurrentOrder(state) {\n            return state.persistentCart.currentOrder;\n          };\n\n          _context2.next = 4;\n          return select(getCurrentOrder);\n\n        case 4:\n          currentOrder = _context2.sent;\n          currentOrder = orderUtils.removeFromOrder(currentOrder, action.item, action.quantity);\n          _context2.next = 8;\n          return put({\n            type: actionTypes.REMOVE_FROM_ORDER_SUCCESS,\n            currentOrder: currentOrder\n          });\n\n        case 8:\n          _context2.next = 15;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 15;\n          return put({\n            type: actionTypes.REMOVE_FROM_ORDER_FAILURE,\n            error: _context2.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\nexport function actionWatcher() {\n  return _regeneratorRuntime.wrap(function actionWatcher$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return [takeLatest(actionTypes.ADD_TO_ORDER_REQUEST, addToOrder), takeLatest(actionTypes.REMOVE_FROM_ORDER_REQUEST, removeFromOrder)];\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/michaelfoster/Git/mryum-avc/src/integration/sagas/cartIntegration.js"],"names":["addToOrder","removeFromOrder","actionWatcher","actionTypes","_","takeLatest","put","select","orderUtils","action","getCurrentOrder","state","persistentCart","currentOrder","buildItemTemplate","item","quantity","newItem","cloneDeep","orderClone","nextCurrentOrder","id","concat","type","ADD_TO_ORDER_SUCCESS","console","log","ADD_TO_ORDER_FAILURE","error","REMOVE_FROM_ORDER_SUCCESS","REMOVE_FROM_ORDER_FAILURE","ADD_TO_ORDER_REQUEST","REMOVE_FROM_ORDER_REQUEST"],"mappings":";;;;yBAQiBA,U;;;yBA+BAC,e;;;yBAkBAC,a;;AAzDjB,OAAO,KAAKC,WAAZ,MAA6B,0DAA7B,C,CACA;;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,MAA1B,QAAwC,oBAAxC;AACA,OAAO,KAAKC,UAAZ,MAA4B,2BAA5B;AAIA,OAAO,SAAUR,UAAV,CAAqBS,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGGC,UAAAA,eAHH,GAGqB,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,mBAAIA,KAAK,CAACC,cAAN,CAAqBC,YAAzB;AAAA,WAH1B;;AAAA;AAIgB,iBAAMN,MAAM,CAACG,eAAD,CAAZ;;AAJhB;AAICG,UAAAA,YAJD;AAAA;AAKa,iBAAML,UAAU,CAACM,iBAAX,CAA6BL,MAAM,CAACM,IAApC,EAA0CN,MAAM,CAACO,QAAjD,CAAN;;AALb;AAKGC,UAAAA,OALH;AAAA;AAMc,iBAAMb,CAAC,CAACc,SAAF,CAAYL,YAAZ,CAAN;;AANd;AAMCM,UAAAA,UAND;AAQGC,UAAAA,gBARH,GAQsB,EARtB;;AAUH,cAAGD,UAAU,CAACF,OAAO,CAACI,EAAT,CAAb,EAA0B;AACtBD,YAAAA,gBAAgB,CAACH,OAAO,CAACI,EAAT,CAAhB,GAA+B,CAACJ,OAAD,EAAUK,MAAV,CAAiBH,UAAU,CAACF,OAAO,CAACI,EAAT,CAA3B,CAA/B;AACH,WAFD,MAGI;AACFD,YAAAA,gBAAgB,CAACH,OAAO,CAACI,EAAT,CAAhB,GAA+B,CAACJ,OAAD,CAA/B;AACD;;AAfE;AAkBD,iBAAMX,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEpB,WAAW,CAACqB,oBADV;AAERX,YAAAA,YAAY,EAAEO;AAFN,WAAD,CAAT;;AAlBC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBHK,UAAAA,OAAO,CAACC,GAAR;AAvBG;AAwBH,iBAAMpB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEpB,WAAW,CAACwB,oBADV;AAERC,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAxBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BP,OAAO,SAAU3B,eAAV,CAA0BQ,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEGC,UAAAA,eAFH,GAEqB,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,mBAAIA,KAAK,CAACC,cAAN,CAAqBC,YAAzB;AAAA,WAF1B;;AAAA;AAGgB,iBAAMN,MAAM,CAACG,eAAD,CAAZ;;AAHhB;AAGCG,UAAAA,YAHD;AAIHA,UAAAA,YAAY,GAAGL,UAAU,CAACP,eAAX,CAA2BY,YAA3B,EAAyCJ,MAAM,CAACM,IAAhD,EAAsDN,MAAM,CAACO,QAA7D,CAAf;AAJG;AAKD,iBAAMV,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEpB,WAAW,CAAC0B,yBADV;AAERhB,YAAAA,YAAY,EAAZA;AAFQ,WAAD,CAAT;;AALC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUHY,UAAAA,OAAO,CAACC,GAAR;AAVG;AAWH,iBAAMpB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEpB,WAAW,CAAC2B,yBADV;AAERF,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAXG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBP,OAAO,SAAU1B,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAM,CACJG,UAAU,CAACF,WAAW,CAAC4B,oBAAb,EAAmC/B,UAAnC,CADN,EAEJK,UAAU,CAACF,WAAW,CAAC6B,yBAAb,EAAwC/B,eAAxC,CAFN,CAAN;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as actionTypes from '../../components/Cart/actions/actionTypes/actionTypes.js';\n// eslint-disable-next-line\nimport _ from 'lodash';\nimport { takeLatest, put, select,} from 'redux-saga/effects';\nimport * as orderUtils from '../../utils/orderUtils.js';\n\n\n\nexport function* addToOrder(action) {\n  try {\n    \n    const getCurrentOrder = state => state.persistentCart.currentOrder;\n    let currentOrder = yield select(getCurrentOrder);\n    const newItem = yield orderUtils.buildItemTemplate(action.item, action.quantity);\n    let orderClone = yield _.cloneDeep(currentOrder);\n\n    const nextCurrentOrder = {};\n    \n    if(orderClone[newItem.id]){\n        nextCurrentOrder[newItem.id] = [newItem].concat(orderClone[newItem.id]);\n    }\n    else{\n      nextCurrentOrder[newItem.id] = [newItem];\n    }\n\n    \n      yield put({\n        type: actionTypes.ADD_TO_ORDER_SUCCESS,\n        currentOrder: nextCurrentOrder,\n      })\n  } catch (error) {\n    console.log(error)\n    yield put({\n      type: actionTypes.ADD_TO_ORDER_FAILURE,\n      error,\n    })\n  }\n}\n\nexport function* removeFromOrder(action) {\n  try {\n    const getCurrentOrder = state => state.persistentCart.currentOrder;\n    let currentOrder = yield select(getCurrentOrder);\n    currentOrder = orderUtils.removeFromOrder(currentOrder, action.item, action.quantity);\n      yield put({\n        type: actionTypes.REMOVE_FROM_ORDER_SUCCESS,\n        currentOrder,\n      })\n  } catch (error) {\n    console.log(error)\n    yield put({\n      type: actionTypes.REMOVE_FROM_ORDER_FAILURE,\n      error,\n    })\n  }\n}\n\nexport function* actionWatcher() {\n  yield [\n    takeLatest(actionTypes.ADD_TO_ORDER_REQUEST, addToOrder),\n    takeLatest(actionTypes.REMOVE_FROM_ORDER_REQUEST, removeFromOrder),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}