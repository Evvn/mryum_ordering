{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelfoster/Git/mryum-avc/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addToCart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(removeFromCart),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(actionWatcher);\n\nimport * as actionTypes from '../../components/Cart/actions/actionTypes/actionTypes.js'; // eslint-disable-next-line\n\nimport { takeLatest, put, select } from 'redux-saga/effects';\nimport * as orderUtils from '../../utils/orderutils.js';\n\nvar getCurrentOrder = function getCurrentOrder(state) {\n  return state.persistentCart.currentOrder;\n};\n\nexport function addToCart(action) {\n  var currentOrder;\n  return _regeneratorRuntime.wrap(function addToCart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(getCurrentOrder);\n\n        case 3:\n          currentOrder = _context.sent;\n          currentOrder = orderUtils.addToOrder(currentOrder);\n          _context.next = 7;\n          return put({\n            type: actionTypes.ADD_TO_ORDER_SUCCESS,\n            currentOrder: currentOrder\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 14;\n          return put({\n            type: actionTypes.ADD_TO_ORDER_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\nexport function removeFromCart(action) {\n  var currentOrder;\n  return _regeneratorRuntime.wrap(function removeFromCart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return select(getCurrentOrder);\n\n        case 3:\n          currentOrder = _context2.sent;\n          currentOrder = orderUtils.removeFromOrder(currentOrder);\n          _context2.next = 7;\n          return put({\n            type: actionTypes.REMOVE_FROM_CART_SUCCESS,\n            currentOrder: currentOrder\n          });\n\n        case 7:\n          _context2.next = 14;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 14;\n          return put({\n            type: actionTypes.REMOVE_FROM_CART_FAILURE,\n            error: _context2.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\nexport function actionWatcher() {\n  return _regeneratorRuntime.wrap(function actionWatcher$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return [takeLatest(actionTypes.ADD_TO_ORDER_REQUEST, addToCart), takeLatest(actionTypes.REMOVE_FROM_CART_REQUEST, removeFromCart)];\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/michaelfoster/Git/mryum-avc/src/integration/sagas/cartIntegration.js"],"names":["addToCart","removeFromCart","actionWatcher","actionTypes","takeLatest","put","select","orderUtils","getCurrentOrder","state","persistentCart","currentOrder","action","addToOrder","type","ADD_TO_ORDER_SUCCESS","console","log","ADD_TO_ORDER_FAILURE","error","removeFromOrder","REMOVE_FROM_CART_SUCCESS","REMOVE_FROM_CART_FAILURE","ADD_TO_ORDER_REQUEST","REMOVE_FROM_CART_REQUEST"],"mappings":";;;;yBAOiBA,S;;;yBAiBAC,c;;;yBAiBAC,a;;AAzCjB,OAAO,KAAKC,WAAZ,MAA6B,0DAA7B,C,CACA;;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,MAA1B,QAAwC,oBAAxC;AACA,OAAO,KAAKC,UAAZ,MAA4B,2BAA5B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,cAAN,CAAqBC,YAAzB;AAAA,CAA7B;;AAEA,OAAO,SAAUX,SAAV,CAAoBY,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgB,iBAAMN,MAAM,CAACE,eAAD,CAAZ;;AAFhB;AAECG,UAAAA,YAFD;AAGHA,UAAAA,YAAY,GAAGJ,UAAU,CAACM,UAAX,CAAsBF,YAAtB,CAAf;AAHG;AAID,iBAAMN,GAAG,CAAC;AACRS,YAAAA,IAAI,EAAEX,WAAW,CAACY,oBADV;AAERJ,YAAAA,YAAY,EAAZA;AAFQ,WAAD,CAAT;;AAJC;AAAA;AAAA;;AAAA;AAAA;AAAA;AASHK,UAAAA,OAAO,CAACC,GAAR;AATG;AAUH,iBAAMZ,GAAG,CAAC;AACRS,YAAAA,IAAI,EAAEX,WAAW,CAACe,oBADV;AAERC,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAVG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBP,OAAO,SAAUlB,cAAV,CAAyBW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgB,iBAAMN,MAAM,CAACE,eAAD,CAAZ;;AAFhB;AAECG,UAAAA,YAFD;AAGHA,UAAAA,YAAY,GAAGJ,UAAU,CAACa,eAAX,CAA2BT,YAA3B,CAAf;AAHG;AAID,iBAAMN,GAAG,CAAC;AACRS,YAAAA,IAAI,EAAEX,WAAW,CAACkB,wBADV;AAERV,YAAAA,YAAY,EAAZA;AAFQ,WAAD,CAAT;;AAJC;AAAA;AAAA;;AAAA;AAAA;AAAA;AASHK,UAAAA,OAAO,CAACC,GAAR;AATG;AAUH,iBAAMZ,GAAG,CAAC;AACRS,YAAAA,IAAI,EAAEX,WAAW,CAACmB,wBADV;AAERH,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAVG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBP,OAAO,SAAUjB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAM,CACJE,UAAU,CAACD,WAAW,CAACoB,oBAAb,EAAmCvB,SAAnC,CADN,EAEJI,UAAU,CAACD,WAAW,CAACqB,wBAAb,EAAuCvB,cAAvC,CAFN,CAAN;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as actionTypes from '../../components/Cart/actions/actionTypes/actionTypes.js';\n// eslint-disable-next-line\nimport { takeLatest, put, select } from 'redux-saga/effects';\nimport * as orderUtils from '../../utils/orderutils.js';\n\nconst getCurrentOrder = state => state.persistentCart.currentOrder;\n\nexport function* addToCart(action) {\n  try {\n    let currentOrder = yield select(getCurrentOrder);\n    currentOrder = orderUtils.addToOrder(currentOrder);\n      yield put({\n        type: actionTypes.ADD_TO_ORDER_SUCCESS,\n        currentOrder,\n      })\n  } catch (error) {\n    console.log(error)\n    yield put({\n      type: actionTypes.ADD_TO_ORDER_FAILURE,\n      error,\n    })\n  }\n}\n\nexport function* removeFromCart(action) {\n  try {\n    let currentOrder = yield select(getCurrentOrder);\n    currentOrder = orderUtils.removeFromOrder(currentOrder);\n      yield put({\n        type: actionTypes.REMOVE_FROM_CART_SUCCESS,\n        currentOrder,\n      })\n  } catch (error) {\n    console.log(error)\n    yield put({\n      type: actionTypes.REMOVE_FROM_CART_FAILURE,\n      error,\n    })\n  }\n}\n\nexport function* actionWatcher() {\n  yield [\n    takeLatest(actionTypes.ADD_TO_ORDER_REQUEST, addToCart),\n    takeLatest(actionTypes.REMOVE_FROM_CART_REQUEST, removeFromCart),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}