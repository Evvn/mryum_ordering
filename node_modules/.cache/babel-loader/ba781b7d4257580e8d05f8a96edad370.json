{"ast":null,"code":"import _classCallCheck from \"/Users/michaelfoster/Git/mryum/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelfoster/Git/mryum/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelfoster/Git/mryum/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelfoster/Git/mryum/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelfoster/Git/mryum/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelfoster/Git/mryum/src/components/Common/HorizontalScrollNav.js\";\nimport React from 'react';\nimport DragScroll from 'react-dragscroll';\nimport classNames from 'classnames';\n\nvar HorizontalScrollNav =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HorizontalScrollNav, _React$Component);\n\n  function HorizontalScrollNav(props) {\n    var _this;\n\n    _classCallCheck(this, HorizontalScrollNav);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HorizontalScrollNav).call(this, props));\n    _this.state = {\n      dragging: false,\n      current: _this.props.sections[0]\n    };\n    return _this;\n  }\n\n  _createClass(HorizontalScrollNav, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('mouseup', this.mouseUpHandle.bind(this));\n      window.addEventListener('mousemove', this.mouseMoveHandle.bind(this));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('mouseup', this.mouseUpHandle.bind(this));\n      window.removeEventListener('mousemove', this.mouseMoveHandle.bind(this));\n    }\n  }, {\n    key: \"mouseUpHandle\",\n    value: function mouseUpHandle(e) {\n      if (this.state.dragging) {\n        var dragging = false;\n        this.setState(this.state);\n      }\n    }\n  }, {\n    key: \"mouseDownHandle\",\n    value: function mouseDownHandle(e) {\n      if (!this.state.dragging) {\n        this.state.dragging = true;\n        this.setState(this.state);\n        this.lastClientX = e.clientX;\n        this.lastClientY = e.clientY;\n        e.preventDefault();\n      }\n    }\n  }, {\n    key: \"mouseMoveHandle\",\n    value: function mouseMoveHandle(e) {\n      if (this.state.dragging) {\n        this.refs.container.scrollLeft -= -this.lastClientX + (this.lastClientX = e.clientX);\n        this.refs.container.scrollTop -= -this.lastClientY + (this.lastClientY = e.clientY);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var sectionPositions = this.props.sectionPositions;\n      var sections = Object.keys(sectionPositions);\n      return React.createElement(\"div\", {\n        className: \"selectSection\",\n        onMouseUp: this.mouseUpHandle.bind(this),\n        onMouseMove: this.mouseMoveHandle.bind(this),\n        ref: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, sections.map(function (section, index) {\n        var y = window.scrollY;\n        var sectionPosition = sectionPositions[section];\n        var nextPosition = sectionPosition[section[index + 1]];\n        var nextValue = nextPostion ? nextPosition : -1;\n        var className = y > sectionPosition && y < nextValue ? \"red\" : '';\n        return React.createElement(\"span\", {\n          className: className,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, section);\n      }));\n    }\n  }]);\n\n  return HorizontalScrollNav;\n}(React.Component);\n\n;\nexport default HorizontalScrollNav;","map":{"version":3,"sources":["/Users/michaelfoster/Git/mryum/src/components/Common/HorizontalScrollNav.js"],"names":["React","DragScroll","classNames","HorizontalScrollNav","props","state","dragging","current","sections","window","addEventListener","mouseUpHandle","bind","mouseMoveHandle","removeEventListener","e","setState","lastClientX","clientX","lastClientY","clientY","preventDefault","refs","container","scrollLeft","scrollTop","sectionPositions","Object","keys","map","section","index","y","scrollY","sectionPosition","nextPosition","nextValue","nextPostion","className","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DragScroll from 'react-dragscroll';\nimport classNames from 'classnames';\n\n\nclass HorizontalScrollNav extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          dragging: false,\n          current: this.props.sections[0],\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener('mouseup', this.mouseUpHandle.bind(this));\n        window.addEventListener('mousemove', this.mouseMoveHandle.bind(this));\n    }\n    \n      componentWillUnmount() {\n        window.removeEventListener('mouseup', this.mouseUpHandle.bind(this));\n        window.removeEventListener('mousemove', this.mouseMoveHandle.bind(this));\n    }\n\n    mouseUpHandle(e) {\n        if (this.state.dragging) {\n          const dragging = false;\n          this.setState(this.state);\n        }\n      }\n\n    mouseDownHandle(e) {\n        if (!this.state.dragging) {\n          this.state.dragging = true;\n          this.setState(this.state);\n          this.lastClientX = e.clientX;\n          this.lastClientY = e.clientY;\n          e.preventDefault();\n        }\n      }\n    \n      mouseMoveHandle(e) {\n        if (this.state.dragging) {\n          this.refs.container.scrollLeft -=\n            (-this.lastClientX + (this.lastClientX = e.clientX));\n          this.refs.container.scrollTop -=\n            (-this.lastClientY + (this.lastClientY = e.clientY));\n        }\n      }\n\n    render() {\n        const { sectionPositions } = this.props;\n        const sections = Object.keys(sectionPositions);\n        return (\n            <div\n                className=\"selectSection\"\n                onMouseUp={this.mouseUpHandle.bind(this)}\n                onMouseMove={this.mouseMoveHandle.bind(this)}\n                ref=\"container\">\n                {sections.map((section,index)  => {\n                    const y = window.scrollY;\n                    const sectionPosition = sectionPositions[section];\n                    const nextPosition = sectionPosition[section[index + 1]];\n                    const nextValue = nextPostion ? nextPosition : -1;\n                    const className = (y > sectionPosition && y < nextValue) ? \"red\" : ''; \n\n                    return (\n                        <span\n                            className={className}>\n                            {section}\n                        </span>\n                    );\n                })}     \n            </div>\n        );\n    }\n};\n\nexport default HorizontalScrollNav;"]},"metadata":{},"sourceType":"module"}