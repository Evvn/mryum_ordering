{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelfoster/Git/mryum/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getMenuData),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSectionPositions),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(actionWatcher);\n\nimport * as actionTypes from '../../components/Menu/actions/actionTypes/actionTypes.js';\nimport { takeLatest, put, select, race, delay, call } from 'redux-saga/effects';\nimport callBff from '../callBff.js';\nexport function getMenuData(action) {\n  var _ref, res, timeout;\n\n  return _regeneratorRuntime.wrap(function getMenuData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return race({\n            res: call(callBff(\"menu/\".concat(action.venue), 'GET')),\n            timeout: delay(5000)\n          });\n\n        case 3:\n          _ref = _context.sent;\n          res = _ref.res;\n          timeout = _ref.timeout;\n\n          if (!res) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 9;\n          return put({\n            type: actionTypes.GET_MENU_DATA_SUCCESS,\n            venue: action.venue,\n            res: res\n          });\n\n        case 9:\n          _context.next = 11;\n          return put({\n            type: actionTypes.SET_ITEM_ID,\n            id: action.item\n          });\n\n        case 11:\n          _context.next = 18;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 18;\n          return put({\n            type: actionTypes.GET_MENU_DATA_FAILURE,\n            error: _context.t0\n          });\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}\nexport function setSectionPositions(action) {\n  var sortByValue, getCurrentPositions, sectionPositions;\n  return _regeneratorRuntime.wrap(function setSectionPositions$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          sortByValue = function sortByValue(obj) {\n            var newObj = {};\n            var sortable = Object.keys(obj).map(function (key) {\n              return [key, obj[key]];\n            });\n            sortable.sort(function (a, b) {\n              return a[1] - b[1];\n            });\n            sortable.forEach(function (obj) {\n              newObj[obj[0]] = obj[1];\n            });\n            return newObj;\n          };\n\n          getCurrentPositions = function getCurrentPositions(state) {\n            return state.menu.sectionPositions;\n          };\n\n          _context2.next = 4;\n          return select(getCurrentPositions);\n\n        case 4:\n          sectionPositions = _context2.sent;\n          sectionPositions = !sectionPositions ? {} : sectionPositions;\n          sectionPositions[action.section] = action.position.y;\n          _context2.next = 9;\n          return put({\n            type: actionTypes.SET_SECTION_POSITION_SUCCESS,\n            sectionPositions: sortByValue(sectionPositions)\n          });\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function actionWatcher() {\n  return _regeneratorRuntime.wrap(function actionWatcher$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return [takeLatest(actionTypes.GET_MENU_DATA_REQUEST, getMenuData), takeLatest(actionTypes.SET_SECTION_POSITION_REQUEST, setSectionPositions)];\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/michaelfoster/Git/mryum/src/integration/sagas/menuIntegration.js"],"names":["getMenuData","setSectionPositions","actionWatcher","actionTypes","takeLatest","put","select","race","delay","call","callBff","action","res","venue","timeout","type","GET_MENU_DATA_SUCCESS","SET_ITEM_ID","id","item","console","log","GET_MENU_DATA_FAILURE","error","sortByValue","obj","newObj","sortable","Object","keys","map","key","sort","a","b","forEach","getCurrentPositions","state","menu","sectionPositions","section","position","y","SET_SECTION_POSITION_SUCCESS","GET_MENU_DATA_REQUEST","SET_SECTION_POSITION_REQUEST"],"mappings":";;;;yBAIiBA,W;;;yBAyBAC,mB;;;yBAqBAC,a;;AAlDjB,OAAO,KAAKC,WAAZ,MAA6B,0DAA7B;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwCC,KAAxC,EAA+CC,IAA/C,QAA2D,oBAA3D;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,OAAO,SAAUV,WAAV,CAAsBW,MAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEsB,iBAAMJ,IAAI,CAAC;AAClCK,YAAAA,GAAG,EAAEH,IAAI,CAACC,OAAO,gBAASC,MAAM,CAACE,KAAhB,GAAyB,KAAzB,CAAR,CADyB;AAElCC,YAAAA,OAAO,EAAEN,KAAK,CAAC,IAAD;AAFoB,WAAD,CAAV;;AAFtB;AAAA;AAEKI,UAAAA,GAFL,QAEKA,GAFL;AAEUE,UAAAA,OAFV,QAEUA,OAFV;;AAAA,eAMEF,GANF;AAAA;AAAA;AAAA;;AAAA;AAOD,iBAAMP,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEZ,WAAW,CAACa,qBADV;AAERH,YAAAA,KAAK,EAAEF,MAAM,CAACE,KAFN;AAGRD,YAAAA,GAAG,EAAHA;AAHQ,WAAD,CAAT;;AAPC;AAAA;AAYD,iBAAMP,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEZ,WAAW,CAACc,WADV;AAERC,YAAAA,EAAE,EAAEP,MAAM,CAACQ;AAFH,WAAD,CAAT;;AAZC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBHC,UAAAA,OAAO,CAACC,GAAR;AAjBG;AAkBH,iBAAMhB,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEZ,WAAW,CAACmB,qBADV;AAERC,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAlBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBP,OAAO,SAAUtB,mBAAV,CAA8BU,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCa,UAAAA,WADD,GACe,SAAdA,WAAc,CAACC,GAAD,EAAS;AAC3B,gBAAMC,MAAM,GAAG,EAAf;AACA,gBAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,GAAjB,CAAqB,UAAAC,GAAG;AAAA,qBAAI,CAACA,GAAD,EAAMN,GAAG,CAACM,GAAD,CAAT,CAAJ;AAAA,aAAxB,CAAjB;AACAJ,YAAAA,QAAQ,CAACK,IAAT,CAAc,UAACC,CAAD,EAAGC,CAAH;AAAA,qBAASD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAjB;AAAA,aAAd;AACAP,YAAAA,QAAQ,CAACQ,OAAT,CAAiB,UAAAV,GAAG,EAAI;AACtBC,cAAAA,MAAM,CAACD,GAAG,CAAC,CAAD,CAAJ,CAAN,GAAiBA,GAAG,CAAC,CAAD,CAApB;AACD,aAFD;AAIA,mBAAOC,MAAP;AACD,WAVI;;AAWGU,UAAAA,mBAXH,GAWyB,SAAtBA,mBAAsB,CAAAC,KAAK;AAAA,mBAAIA,KAAK,CAACC,IAAN,CAAWC,gBAAf;AAAA,WAX9B;;AAAA;AAYoB,iBAAMjC,MAAM,CAAC8B,mBAAD,CAAZ;;AAZpB;AAYCG,UAAAA,gBAZD;AAaHA,UAAAA,gBAAgB,GAAG,CAACA,gBAAD,GAAoB,EAApB,GAAyBA,gBAA5C;AACAA,UAAAA,gBAAgB,CAAC5B,MAAM,CAAC6B,OAAR,CAAhB,GAAmC7B,MAAM,CAAC8B,QAAP,CAAgBC,CAAnD;AAdG;AAeH,iBAAMrC,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAEZ,WAAW,CAACwC,4BADV;AAERJ,YAAAA,gBAAgB,EAAEf,WAAW,CAACe,gBAAD;AAFrB,WAAD,CAAT;;AAfG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBP,OAAO,SAAUrC,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAM,CACJE,UAAU,CAACD,WAAW,CAACyC,qBAAb,EAAoC5C,WAApC,CADN,EAEJI,UAAU,CAACD,WAAW,CAAC0C,4BAAb,EAA2C5C,mBAA3C,CAFN,CAAN;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as actionTypes from '../../components/Menu/actions/actionTypes/actionTypes.js';\nimport { takeLatest, put, select, race, delay, call } from 'redux-saga/effects';\nimport callBff from '../callBff.js'\n\nexport function* getMenuData(action) {\n  try {\n    const { res, timeout } = yield race({\n      res: call(callBff(`menu/${action.venue}`, 'GET')),\n      timeout: delay(5000),\n    });\n      if(res){\n      yield put({\n        type: actionTypes.GET_MENU_DATA_SUCCESS,\n        venue: action.venue,\n        res,\n      })\n      yield put({\n        type: actionTypes.SET_ITEM_ID,\n        id: action.item,\n      })}\n  } catch (error) {\n    console.log(error)\n    yield put({\n      type: actionTypes.GET_MENU_DATA_FAILURE,\n      error,\n    })\n  }\n}\n\nexport function* setSectionPositions(action) {\n  const sortByValue = (obj) => {\n    const newObj = {};\n    const sortable = Object.keys(obj).map(key => [key, obj[key]]);\n    sortable.sort((a,b) => a[1] - b[1]);\n    sortable.forEach(obj => {\n      newObj[obj[0]] = obj[1]\n    });\n\n    return newObj;\n  } \n    const getCurrentPositions = state => state.menu.sectionPositions;\n    let sectionPositions = yield select(getCurrentPositions);\n    sectionPositions = !sectionPositions ? {} : sectionPositions;\n    sectionPositions[action.section] = action.position.y;\n    yield put({\n      type: actionTypes.SET_SECTION_POSITION_SUCCESS,\n      sectionPositions: sortByValue(sectionPositions),\n    });\n}\n\nexport function* actionWatcher() {\n  yield [\n    takeLatest(actionTypes.GET_MENU_DATA_REQUEST, getMenuData),\n    takeLatest(actionTypes.SET_SECTION_POSITION_REQUEST, setSectionPositions),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}